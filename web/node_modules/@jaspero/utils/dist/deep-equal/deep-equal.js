"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepEqual = void 0;
function deepEqual(a, b) {
    if (a === b)
        return true;
    if (a && b && typeof a == 'object' && typeof b == 'object') {
        if (a.constructor !== b.constructor)
            return false;
        var length = void 0, i = void 0, keys = void 0;
        if (Array.isArray(a)) {
            length = a.length;
            if (length !== b.length)
                return false;
            for (i = length; i-- !== 0;) {
                if (!deepEqual(a[i], b[i]))
                    return false;
            }
            return true;
        }
        if ((a instanceof Map) && (b instanceof Map)) {
            if (a.size !== b.size)
                return false;
            // @ts-ignore
            for (var _i = 0, _a = a.entries(); _i < _a.length; _i++) {
                var entry = _a[_i];
                if (!b.has(entry[0]))
                    return false;
            }
            // @ts-ignore
            for (var _b = 0, _c = a.entries(); _b < _c.length; _b++) {
                var entry = _c[_b];
                if (!deepEqual(entry[1], b.get(entry[0])))
                    return false;
            }
            return true;
        }
        if ((a instanceof Set) && (b instanceof Set)) {
            if (a.size !== b.size)
                return false;
            // @ts-ignore
            for (var _d = 0, _e = a.values(); _d < _e.length; _d++) {
                var value = _e[_d];
                if (!b.has(value))
                    return false;
            }
            return true;
        }
        if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
            length = a.byteLength;
            if (length !== b.byteLength)
                return false;
            for (i = length; i-- !== 0;) {
                if (a[i] !== b[i])
                    return false;
            }
            return true;
        }
        if (a.constructor === RegExp)
            return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf)
            return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString)
            return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
            return false;
        for (i = length; i-- !== 0;) {
            var key = keys[i];
            if (!deepEqual(a[key], b[key]))
                return false;
        }
        return true;
    }
    // true if both NaN, false otherwise
    return a !== a && b !== b;
}
exports.deepEqual = deepEqual;
