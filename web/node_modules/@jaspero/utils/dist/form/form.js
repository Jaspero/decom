"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Form = exports.FormControl = exports.Validators = void 0;
var deep_equal_1 = require("../deep-equal/deep-equal");
var deep_copy_1 = require("../deep-copy/deep-copy");
function isNumber(value) {
    return typeof value === 'number' || String(Number(value)) == value;
}
var Validators = /** @class */ (function () {
    function Validators() {
    }
    Validators.required = function (value) {
        return {
            valid: value !== undefined && value !== null && value !== '',
            error: 'This field is required'
        };
    };
    Validators.email = function (value) {
        return {
            valid: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(value),
            error: 'Email is not valid'
        };
    };
    Validators.min = function (minimum) {
        return function (value) {
            if (!isNumber(value)) {
                return {
                    valid: false,
                    error: "Field must be a number (minimum " + minimum + ")"
                };
            }
            var item = Number(value);
            return {
                valid: item >= minimum,
                error: "This field is too small (minimum " + minimum + ")"
            };
        };
    };
    Validators.max = function (maximum) {
        return function (value) {
            if (!isNumber(value)) {
                return {
                    valid: false,
                    error: "Field must be a number (maximum " + maximum + ")"
                };
            }
            var item = Number(value);
            return {
                valid: item <= maximum,
                error: "This field is too big (maximum " + maximum + ")"
            };
        };
    };
    Validators.minLength = function (minimum) {
        return function (value) {
            if (typeof value !== 'string' && !Array.isArray(value)) {
                return {
                    valid: false,
                    error: "This field is too short (minimum " + minimum + " characters)"
                };
            }
            return {
                valid: value.length >= minimum,
                error: "This field is too short (minimum " + minimum + " characters)"
            };
        };
    };
    Validators.maxLength = function (maximum) {
        return function (value) {
            if (typeof value !== 'string' && !Array.isArray(value)) {
                return {
                    valid: false,
                    error: "This field is too long (maximum " + maximum + " characters)"
                };
            }
            return {
                valid: value.length <= maximum,
                error: "This field is too long (maximum " + maximum + " characters)"
            };
        };
    };
    Validators.URL = function (value) {
        return {
            valid: /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)/.test(value),
            error: 'This field is not a valid URL'
        };
    };
    Validators.pattern = function (pattern) {
        return function (value) {
            return {
                valid: new RegExp(pattern).test(value),
                error: "This field is not valid"
            };
        };
    };
    Validators.enum = function (values) {
        return function (value) {
            return {
                valid: values.some(function (item) { return (0, deep_equal_1.deepEqual)(item, value); }),
                error: "This field is not valid. Must be one of: " + values.join(', ')
            };
        };
    };
    return Validators;
}());
exports.Validators = Validators;
var FormControl = /** @class */ (function () {
    function FormControl(value, validators) {
        var _this = this;
        this._validators = [];
        this._subscriptions = [];
        this._touched = false;
        this._handler = {
            get: function (target, key) {
                // if (typeof target[key] === 'object' && target[key] !== null) {
                //   return new Proxy(target[key], this._handler as any as ProxyHandler<any>);
                // }
                return target[key];
            },
            set: function (target, prop, value) {
                target[prop] = value;
                if (!_this._touched && !(0, deep_equal_1.deepEqual)(target[prop], _this._originalValue)) {
                    _this._touched = true;
                }
                _this._subscriptions.forEach(function (subscription) { return subscription(value); });
                return true;
            }
        };
        this._originalValue = (0, deep_copy_1.deepCopy)(value);
        this._validators = validators || [];
        this._proxy = new Proxy({
            value: value
        }, this._handler);
    }
    Object.defineProperty(FormControl.prototype, "value", {
        get: function () {
            return this._proxy.value;
        },
        set: function (value) {
            this._proxy.value = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FormControl.prototype, "valid", {
        get: function () {
            var _this = this;
            return this._validators.every(function (validator) { return validator(_this._proxy.value).valid; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FormControl.prototype, "invalid", {
        get: function () {
            return !this.valid;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FormControl.prototype, "errors", {
        get: function () {
            var _this = this;
            return this._validators
                .map(function (validator) { return validator(_this._proxy.value); })
                .filter(function (result) { return !result.valid; })
                .map(function (result) { return result.error; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FormControl.prototype, "dirty", {
        get: function () {
            return !(0, deep_equal_1.deepEqual)(this._proxy.value, this._originalValue) || this._touched;
        },
        enumerable: false,
        configurable: true
    });
    FormControl.prototype.setValue = function (value) {
        this._proxy.value = value;
    };
    FormControl.prototype.subscribe = function (callback) {
        var _this = this;
        this._subscriptions.push(callback);
        return {
            unsubscribe: function () {
                _this._subscriptions = _this._subscriptions.filter(function (subscription) { return subscription !== callback; });
            }
        };
    };
    return FormControl;
}());
exports.FormControl = FormControl;
var Form = /** @class */ (function () {
    function Form(controls) {
        this.controls = {};
        this.controls = Object.keys(controls).reduce(function (acc, key) {
            var _a, _b;
            if (controls[key] instanceof FormControl) {
                return __assign(__assign({}, acc), (_a = {}, _a[key] = controls[key], _a));
            }
            return __assign(__assign({}, acc), (_b = {}, _b[key] = new FormControl(controls[key][0], controls[key].slice(1)), _b));
        }, {});
    }
    Object.defineProperty(Form.prototype, "valid", {
        get: function () {
            return Object.values(this.controls).every(function (control) { return control.valid; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Form.prototype, "invalid", {
        get: function () {
            return !this.valid;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Form.prototype, "dirty", {
        get: function () {
            return Object.values(this.controls).some(function (control) { return control.dirty; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Form.prototype, "dirtyControls", {
        get: function () {
            var _this = this;
            return Object.keys(this.controls).filter(function (key) { return _this.controls[key].dirty; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Form.prototype, "value", {
        get: function () {
            var _this = this;
            return Object.keys(this.controls).reduce(function (acc, key) {
                var _a;
                return (__assign(__assign({}, acc), (_a = {}, _a[key] = _this.controls[key].value, _a)));
            }, {});
        },
        enumerable: false,
        configurable: true
    });
    Form.prototype.get = function (key) {
        return this.controls[key];
    };
    return Form;
}());
exports.Form = Form;
