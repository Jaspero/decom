export declare class Validators {
    static required(value: any): {
        valid: boolean;
        error: string;
    };
    static email(value: any): {
        valid: boolean;
        error: string;
    };
    static min(minimum: number): (value: number) => {
        valid: boolean;
        error: string;
    };
    static max(maximum: number): (value: number) => {
        valid: boolean;
        error: string;
    };
    static minLength(minimum: number): (value: string) => {
        valid: boolean;
        error: string;
    };
    static maxLength(maximum: number): (value: string) => {
        valid: boolean;
        error: string;
    };
    static URL(value: string): {
        valid: boolean;
        error: string;
    };
    static pattern(pattern: RegExp | string): (value: string) => {
        valid: boolean;
        error: string;
    };
    static enum(values: any[]): (value: any) => {
        valid: boolean;
        error: string;
    };
}
export declare type ValidatorFn<T> = (value: T) => {
    valid: boolean;
    error?: string;
};
export declare class FormControl<T = unknown> {
    private readonly _originalValue;
    private _validators;
    private readonly _proxy;
    private _subscriptions;
    private _touched;
    private _handler;
    constructor(value: T, validators?: ValidatorFn<T>[]);
    get value(): T;
    set value(value: T);
    get valid(): boolean;
    get invalid(): boolean;
    get errors(): (string | undefined)[];
    get dirty(): boolean;
    setValue(value: T): void;
    subscribe(callback: (value: T) => void): {
        unsubscribe: () => void;
    };
}
export declare class Form {
    controls: {
        [key: string]: FormControl;
    };
    constructor(controls: {
        [key: string]: FormControl | [any, ...ValidatorFn<any>[]];
    });
    get valid(): boolean;
    get invalid(): boolean;
    get dirty(): boolean;
    get dirtyControls(): string[];
    get value(): {};
    get(key: string): FormControl<unknown>;
}
